name: Build and Release Windows Application
on:
  push:
    branches:
      - main
  release:
    types: [created]
jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Install MinGW-w64 for cross-compilation
      - name: Install MinGW-w64
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      # Step 4: Install OpenGL libraries for Windows
      - name: Install OpenGL libraries
        run: |
          mkdir -p /usr/x86_64-w64-mingw32/lib
          wget https://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip
          unzip glutdlls37beta.zip -d /usr/x86_64-w64-mingw32/lib
          sudo cp /usr/x86_64-w64-mingw32/lib/*.dll /usr/x86_64-w64-mingw32/lib/

      # Step 5: Build the Go application for Windows
      - name: Build Windows executable
        run: |
          export CC=x86_64-w64-mingw32-gcc
          GOOS=windows GOARCH=amd64 go build -o subnet-calculator.exe ./main.go
        env:
          CGO_ENABLED: 1

      # Step 6: Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      # Step 7: Upload the built executable to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./subnet-calculator.exe
          asset_name: subnet-calculator.exe
          asset_content_type: application/octet-stream

